<html>
<head>
<title>YouTube Shuffle</title>
<link rel="stylesheet" href="http://yui.yahooapis.com/pure/0.4.2/pure-min.css">
<link href="http://fonts.googleapis.com/css?family=Open+Sans" rel="stylesheet" type="text/css">
<style>
body, input.url, div#list, div#video
{
	font-family: "Open Sans", sans-serif;
}

input.url
{
	padding: 0.5em;
	font-size: 1.2em;
	border: 1px solid black;
	width: 100%;
}

.padded { padding: 1em; }

div#list ul
{
	list-style-type: none;
	margin: 0;
	padding: 0;
	height: 30em;
	overflow: auto;
}

div#list li
{
	padding: 0.5em;
	background: #E6E6E6;
	border: 1px solid gray;
	margin: 0.5em;
}

div#list li:hover
{
	background: #F1F1F1;
}

div#list .start-at
{
	font-size: 80%;
	padding-top: 0.6em;
}

div#list .start-at input
{
	width: 2em;
}

div#list li div.item
{
	cursor: pointer;
	text-overflow: ellipsis;
	white-space: nowrap;
	overflow: hidden;
}

button.remove
{
	font-size: 80%;
}
</style>
<script src="http://cdnjs.cloudflare.com/ajax/libs/knockout/3.0.0/knockout-min.js"></script>
<script src="http://cdnjs.cloudflare.com/ajax/libs/jquery/2.0.3/jquery.min.js"></script>
<script src="https://www.youtube.com/iframe_api"></script>
<script>
function onYouTubeIframeAPIReady() { ko.applyBindings(new Model()); }

function ItemModel(Options)
{
	Options = Options || {};
	return { "Code": Options.Code, "Title": Options.Title || ("Untitled (" + OptionsCode + ")"), "StartAt": ko.observable(Options.StartAt || 0) };
}

function Model()
{
	var Self = this;
	var Player;
	Self.List = ko.observableArray();
	Self.Filter = ko.observable();
	Self.FilteredList = ko.computed(FilteredList).extend({ "throttle": 200 });
	var LocalStorageKey = "YouTubePlaylist";

	Self.InputValue = ko.observable();
	Self.Add = function()
	{
		var Input = Self.InputValue();
		var Code;

		var RegExpResults = /[a-zA-Z0-9\-\_]{11}/.exec(Input);
		if (!RegExpResults || RegExpResults.length != 1) return alert("couldn't parse this URL/ID");
		Code = RegExpResults[0];

		$.getJSON
		(
			"https://gdata.youtube.com/feeds/api/videos/" + Code + "?v=2&alt=json&callback=?",
			function(Data)
			{
				var Entry = (Data || {}).entry || {};
				var Title = (Entry.title || {})["$t"];
				Self.List.push(new ItemModel({ "Code": Code, "Title": Title }));
				Self.InputValue("");
			}
		);
	}

	Self.Remove = function(Item)
	{
		if (!confirm("Are you sure you want to delete \"" + Item.Title + "\"?")) return;

		if (Self.Current() == Item)
			Self.Current(null);

		Self.List.remove(Item);
	}

	Self.RemoveCurrent = function() { if (Self.Current()) Self.Remove(Self.Current()); };
	Self.RemoveAll = function()
	{
		if (!confirm("Are you sure you want to delete everything?")) return;
		Self.Current(null);
		Self.List.removeAll();
	}

	Self.Current = ko.observable();
	Self.Play = function(Item)
	{
		Player.loadVideoById(Item.Code, Item.StartAt());
		Self.Current(Item);
	}

	Self.List.subscribe
	(
		function()
		{
			if (Self.List().length == 0)
			{
				if (Player && Self.Current()) Player.stopVideo();
				return;
			}
			if (!Self.Current()) Self.PlaySomething();
		}
	);

	Self.Loop = ko.observable(false);
	Self.PlaySomething = function()
	{
		var Item = Self.List()[~~(Math.random() * Self.List().length)];
		if (!Item) return;

		Self.Play(Item);
	}

	Self.VideoStateChangeHandler = function(E)
	{
		if (E.data == YT.PlayerState.ENDED)
		{
			if (Self.Loop()) Self.Play(Self.Current());
			else Self.PlaySomething();
		}
	}

	Self.ImportString =  ko.observable();
	Self.Import = function()
	{
		if (Import(Self.ImportString()))
			Self.ImportString("");
	}

	function Import(ImportString)
	{
		try
		{
			var List = JSON.parse(ImportString);
			List.forEach(function(L) { Self.List().push(new ItemModel(L)); });
			Self.List.valueHasMutated();
			SaveToLocalStorage();
			return true;
		}
		catch(E) { alert("import failed"); }
	}

	Self.ExportString = ko.computed(function() { return ko.toJSON(Self.List()); });

	Self.Select = function(Model, Event)
	{
		Event.toElement.select();
	}

	function SaveToLocalStorage() { localStorage[LocalStorageKey] = ko.toJSON(Self.List()); }

	Player = new YT.Player
	(
		"player-container",
		{
			"events":
			{
				"onStateChange": Self.VideoStateChangeHandler,
				"onReady": function()
				{
					if (localStorage[LocalStorageKey]) Import(localStorage[LocalStorageKey]);
					setInterval(SaveToLocalStorage, 5000);
				}
			}
		}
	);

	function FilteredList()
	{
		if (!Self.Filter()) return Self.List();
		return Self.List().filter(function(V) { return V.Title.toLowerCase().indexOf(Self.Filter().toLowerCase()) > -1; });
	}
}

var YouTubeScript = document.createElement("script");
YouTubeScript.src = "https://www.youtube.com/iframe_api";
document.head.appendChild(YouTubeScript);
</script>
</head>
<body>
	<div class="padded">
		<form data-bind="submit: Add">
		<input type="text" class="url" placeholder="YouTube URL..." data-bind="value: InputValue">
		</form>
	</div>

	<div class="pure-g">
		<div id="list" class="pure-u-1-5">
			<div class="pure-g padded">
				<div class="pure-u-1-2" data-bind="text: List().length + ' item' + (List().length == 1 ? '' : 's')" style="padding-top: 0.5em"></div>
				<div class="pure-u-1-2">
					<button style="width: 100%" class="pure-button" data-bind="click: RemoveAll">remove all</button>
				</div>
			</div>

			<form class="pure-form padded">
				<input type="text" class="pure-input-1" data-bind="value: Filter, valueUpdate: 'keyup'" placeholder="filter...">
			</form>

			<ul data-bind="foreach: FilteredList">
				<li>
					<div class="item" data-bind="text: Title, click: $parent.Play, attr: { title: Title }"></div>
					<div class="pure-g">
						<div class="pure-u-4-5 start-at">
							<span>start at (seconds)</span>
							<input type="text" data-bind="value: StartAt">
						</div>
						<div class="pure-u-1-5">
							<button data-bind="click: $parent.Remove" class="pure-button remove" style="width: 100%">x</button>
						</div>
					</div>
				</li>
			</ul>
		</div>

		<div id="video" class="pure-u-4-5">
			<div class="padded">
				<div>
					<button data-bind="click: PlaySomething" class="pure-button pure-button-primary">play something else</button>
					<span class="padded" data-bind="if: Current">
						<label><input type="checkbox" data-bind="checked: Loop">loop this song</label>
					</span>

					<div data-bind="if: Current" style="margin-bottom: 1em">
						<h3 data-bind="text: Current().Title"></h3>
						<button data-bind="click: RemoveCurrent" class="pure-button">remove this song</button>
					</div>
				</div>
				<div id="player-container"></div>
				<br>
				<form class="pure-form">
					<label for="import"><h3>batch import</h3></label>
					<textarea id="import" class="pure-input-1" style="height: 10em" data-bind="value: ImportString"></textarea>
					<br><br>
					<button data-bind="click: Import" class="pure-button pure-button-primary">import this stuff</button>
					<br>
					<label for="export"><h3>batch export (copy/paste)</h3></label>
					<input id="export" type="text" class="pure-input-1-2" data-bind="value: ExportString, click: Select" readonly>
				</form>
			</div>
		</div>
	</div>
</body>
</html>
